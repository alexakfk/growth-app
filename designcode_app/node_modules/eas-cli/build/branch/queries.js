"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listAndRenderBranchesOnAppAsync = exports.selectBranchOnAppAsync = exports.BRANCHES_LIMIT = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const BranchQuery_1 = require("../graphql/queries/BranchQuery");
const log_1 = tslib_1.__importDefault(require("../log"));
const utils_1 = require("../update/utils");
const json_1 = require("../utils/json");
const queries_1 = require("../utils/queries");
exports.BRANCHES_LIMIT = 50;
async function selectBranchOnAppAsync(graphqlClient, { projectId, promptTitle, displayTextForListItem, paginatedQueryOptions, }) {
    var _a;
    if (paginatedQueryOptions.nonInteractive) {
        throw new Error('Unable to select a branch in non-interactive mode.');
    }
    const selectedBranch = await (0, queries_1.paginatedQueryWithSelectPromptAsync)({
        limit: (_a = paginatedQueryOptions.limit) !== null && _a !== void 0 ? _a : exports.BRANCHES_LIMIT,
        offset: paginatedQueryOptions.offset,
        queryToPerform: (limit, offset) => queryBranchesOnProjectAsync(graphqlClient, limit, offset, projectId),
        promptOptions: {
            title: promptTitle,
            getIdentifierForQueryItem: updateBranchFragment => updateBranchFragment.id,
            createDisplayTextForSelectionPromptListItem: displayTextForListItem,
        },
    });
    if (!selectedBranch) {
        throw new Error(`Could not find any branches for project "${projectId}"`);
    }
    return selectedBranch;
}
exports.selectBranchOnAppAsync = selectBranchOnAppAsync;
async function listAndRenderBranchesOnAppAsync(graphqlClient, { projectId, paginatedQueryOptions, }) {
    var _a, _b;
    if (paginatedQueryOptions.nonInteractive) {
        const branches = await queryBranchesOnProjectAsync(graphqlClient, (_a = paginatedQueryOptions.limit) !== null && _a !== void 0 ? _a : exports.BRANCHES_LIMIT, paginatedQueryOptions.offset, projectId);
        renderPageOfBranches(branches, paginatedQueryOptions);
    }
    else {
        await (0, queries_1.paginatedQueryWithConfirmPromptAsync)({
            limit: (_b = paginatedQueryOptions.limit) !== null && _b !== void 0 ? _b : exports.BRANCHES_LIMIT,
            offset: paginatedQueryOptions.offset,
            queryToPerform: (limit, offset) => queryBranchesOnProjectAsync(graphqlClient, limit, offset, projectId),
            promptOptions: {
                title: 'Load more branches?',
                renderListItems: branches => renderPageOfBranches(branches, paginatedQueryOptions),
            },
        });
    }
}
exports.listAndRenderBranchesOnAppAsync = listAndRenderBranchesOnAppAsync;
async function queryBranchesOnProjectAsync(graphqlClient, limit, offset, projectId) {
    return await BranchQuery_1.BranchQuery.listBranchesOnAppAsync(graphqlClient, {
        appId: projectId,
        limit,
        offset,
    });
}
function renderPageOfBranches(currentPage, { json }) {
    if (json) {
        (0, json_1.printJsonOnlyOutput)(currentPage);
    }
    else {
        log_1.default.addNewLineIfNone();
        log_1.default.log(chalk_1.default.bold('Branches:'));
        log_1.default.addNewLineIfNone();
        log_1.default.log(currentPage
            .map(branch => (0, utils_1.formatBranch)((0, utils_1.getBranchDescription)(branch)))
            .join(`\n\n${chalk_1.default.dim('———')}\n\n`));
    }
}
