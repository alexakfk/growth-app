"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUpdateBranchOnAppAsync = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const utils_1 = require("../../branch/utils");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const client_1 = require("../../graphql/client");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const json_1 = require("../../utils/json");
async function createUpdateBranchOnAppAsync(graphqlClient, { appId, name }) {
    const result = await (0, client_1.withErrorHandlingAsync)(graphqlClient
        .mutation((0, graphql_tag_1.default) `
          mutation createUpdateBranchForApp($appId: ID!, $name: String!) {
            updateBranch {
              createUpdateBranchForApp(appId: $appId, name: $name) {
                id
                name
              }
            }
          }
        `, {
        appId,
        name,
    })
        .toPromise());
    const newBranch = result.updateBranch.createUpdateBranchForApp;
    if (!newBranch) {
        throw new Error(`Could not create branch ${name}.`);
    }
    return newBranch;
}
exports.createUpdateBranchOnAppAsync = createUpdateBranchOnAppAsync;
class BranchCreate extends EasCommand_1.default {
    async runAsync() {
        let { args: { name }, flags: { json: jsonFlag, 'non-interactive': nonInteractive }, } = await this.parse(BranchCreate);
        const { projectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(BranchCreate, {
            nonInteractive,
        });
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDisplayName = await (0, projectUtils_1.getDisplayNameForProjectIdAsync)(graphqlClient, projectId);
        if (!name) {
            const validationMessage = 'Branch name may not be empty.';
            if (nonInteractive) {
                throw new Error(validationMessage);
            }
            ({ name } = await (0, prompts_1.promptAsync)({
                type: 'text',
                name: 'name',
                message: 'Provide a branch name:',
                initial: await (0, utils_1.getDefaultBranchNameAsync)(),
                validate: value => (value ? true : validationMessage),
            }));
        }
        const newBranch = await createUpdateBranchOnAppAsync(graphqlClient, { appId: projectId, name });
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)(newBranch);
        }
        else {
            log_1.default.withTick(`Ô∏èCreated a new branch: ${chalk_1.default.bold(newBranch.name)} on project ${chalk_1.default.bold(projectDisplayName)}.`);
        }
    }
}
exports.default = BranchCreate;
_a = BranchCreate;
BranchCreate.description = 'create a branch';
BranchCreate.args = [
    {
        name: 'name',
        required: false,
        description: 'Name of the branch to create',
    },
];
BranchCreate.flags = {
    ...flags_1.EasNonInteractiveAndJsonFlags,
};
BranchCreate.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
