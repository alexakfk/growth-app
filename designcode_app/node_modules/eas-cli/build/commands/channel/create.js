"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUpdateChannelOnAppAsync = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const utils_1 = require("../../branch/utils");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const client_1 = require("../../graphql/client");
const BranchQuery_1 = require("../../graphql/queries/BranchQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const formatFields_1 = tslib_1.__importDefault(require("../../utils/formatFields"));
const json_1 = require("../../utils/json");
const create_1 = require("../branch/create");
async function createUpdateChannelOnAppAsync(graphqlClient, { appId, channelName, branchId, }) {
    // Point the new channel at a branch with its same name.
    const branchMapping = JSON.stringify({
        data: [{ branchId, branchMappingLogic: 'true' }],
        version: 0,
    });
    return await (0, client_1.withErrorHandlingAsync)(graphqlClient
        .mutation((0, graphql_tag_1.default) `
          mutation CreateUpdateChannelOnApp($appId: ID!, $name: String!, $branchMapping: String!) {
            updateChannel {
              createUpdateChannelForApp(appId: $appId, name: $name, branchMapping: $branchMapping) {
                id
                name
                branchMapping
              }
            }
          }
        `, {
        appId,
        name: channelName,
        branchMapping,
    })
        .toPromise());
}
exports.createUpdateChannelOnAppAsync = createUpdateChannelOnAppAsync;
class ChannelCreate extends EasCommand_1.default {
    async runAsync() {
        let { args: { name: channelName }, flags: { json: jsonFlag, 'non-interactive': nonInteractive }, } = await this.parse(ChannelCreate);
        const { projectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(ChannelCreate, {
            nonInteractive,
        });
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        if (!channelName) {
            const validationMessage = 'Channel name may not be empty.';
            if (nonInteractive) {
                throw new Error(validationMessage);
            }
            ({ name: channelName } = await (0, prompts_1.promptAsync)({
                type: 'text',
                name: 'name',
                message: 'Provide a channel name:',
                validate: value => (value ? true : validationMessage),
            }));
        }
        let branchId;
        let branchMessage;
        try {
            const branch = await BranchQuery_1.BranchQuery.getBranchByNameAsync(graphqlClient, {
                appId: projectId,
                name: channelName,
            });
            branchId = branch.id;
            branchMessage = `We found a branch with the same name`;
        }
        catch (error) {
            if (error instanceof utils_1.BranchNotFoundError) {
                const newBranch = await (0, create_1.createUpdateBranchOnAppAsync)(graphqlClient, {
                    appId: projectId,
                    name: channelName,
                });
                branchId = newBranch.id;
                branchMessage = `We also went ahead and made a branch with the same name`;
            }
            else {
                throw error;
            }
        }
        const { updateChannel: { createUpdateChannelForApp: newChannel }, } = await createUpdateChannelOnAppAsync(graphqlClient, {
            appId: projectId,
            channelName,
            branchId,
        });
        if (!newChannel) {
            throw new Error(`Could not create channel with name ${channelName} on project with id ${projectId}`);
        }
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)(newChannel);
        }
        else {
            log_1.default.addNewLineIfNone();
            log_1.default.withTick(`Created a new channel on project ${chalk_1.default.bold(await (0, projectUtils_1.getDisplayNameForProjectIdAsync)(graphqlClient, projectId))}`);
            log_1.default.log((0, formatFields_1.default)([
                { label: 'Name', value: newChannel.name },
                { label: 'ID', value: newChannel.id },
            ]));
            log_1.default.addNewLineIfNone();
            log_1.default.withTick(`${branchMessage} and have pointed the channel at it.`);
            log_1.default.log((0, formatFields_1.default)([
                { label: 'Name', value: newChannel.name },
                { label: 'ID', value: branchId },
            ]));
            log_1.default.addNewLineIfNone();
            log_1.default.log(chalk_1.default.bold('You can now update your app by publishing!'));
        }
    }
}
exports.default = ChannelCreate;
_a = ChannelCreate;
ChannelCreate.description = 'create a channel';
ChannelCreate.args = [
    {
        name: 'name',
        required: false,
        description: 'Name of the channel to create',
    },
];
ChannelCreate.flags = {
    ...flags_1.EasNonInteractiveAndJsonFlags,
};
ChannelCreate.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
