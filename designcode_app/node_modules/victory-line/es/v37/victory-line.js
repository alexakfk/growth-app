function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import PropTypes from "prop-types";
import React from "react";
import { Curve } from "../curve";
import { useData, useDomain, useScale, VictoryClipContainer, VictoryContainer, VictoryLabel, VictoryTheme, withContainer } from "victory-core";
import { Clone } from "./clone";
var propTypes = {
  interpolation: PropTypes.oneOfType([PropTypes.oneOf(["basis", "bundle", "cardinal", "catmullRom", "linear", "monotoneX", "monotoneY", "natural", "step", "stepAfter", "stepBefore"]), PropTypes.func]).isRequired
};
var defaultProps = {
  data: [{
    x: 1,
    y: 1
  }, {
    x: 2,
    y: 2
  }, {
    x: 3,
    y: 3
  }, {
    x: 4,
    y: 4
  }],
  containerComponent: /*#__PURE__*/React.createElement(VictoryContainer, null),
  dataComponent: /*#__PURE__*/React.createElement(Curve, null),
  interpolation: "linear",
  labelComponent: /*#__PURE__*/React.createElement(VictoryLabel, {
    renderInPortal: true
  }),
  groupComponent: /*#__PURE__*/React.createElement(VictoryClipContainer, null),
  samples: 50,
  sortKey: "x",
  sortOrder: "ascending",
  standalone: true,
  theme: VictoryTheme.grayscale
};
export var VictoryLineBase = function (props) {
  var data = useData();
  var scale = useScale();
  var domain = useDomain();

  var dataProps = _objectSpread(_objectSpread({}, props), {}, {
    data: data,
    scale: scale,
    domain: domain
  });

  return /*#__PURE__*/React.createElement(Clone, {
    element: props.groupComponent
  }, /*#__PURE__*/React.createElement(Clone, _extends({
    element: props.dataComponent
  }, dataProps)));
};
VictoryLineBase.propTypes = propTypes;
VictoryLineBase.defaultProps = defaultProps;
export var VictoryLine = withContainer(VictoryLineBase);
//# sourceMappingURL=victory-line.js.map